c("GO:0016259","selenocysteine metabolic process", 0.050,-6.222, 3.626, 4.395,143.0000,0.906,0.102),
c("GO:0043170","macromolecule metabolic process",32.799,-5.966, 0.570, 7.213,396.0000,0.957,0.110),
c("GO:0006112","energy reserve metabolic process", 0.133, 1.816, 4.541, 4.821,142.0000,0.912,0.111),
c("GO:0043687","post-translational protein modification", 0.027,-7.768,-1.792, 4.133,636.0000,0.885,0.114),
c("GO:0007154","cell communication", 4.358, 3.665, 4.167, 6.336,154.0000,0.898,0.119),
c("GO:0005975","carbohydrate metabolic process", 5.984,-4.158,-0.377, 6.474,214.0000,0.960,0.129),
c("GO:0051301","cell division", 1.357, 6.728, 0.377, 5.829,140.0000,0.908,0.135),
c("GO:0007049","cell cycle", 1.410, 5.361, 1.091, 5.846,140.0000,0.907,0.136),
c("GO:0044763","single-organism cellular process",41.995, 1.013, 6.266, 7.320,823.0000,0.900,0.142),
c("GO:0044255","cellular lipid metabolic process", 2.577, 1.283, 5.642, 6.108,113.0000,0.879,0.158),
c("GO:0006888","ER to Golgi vesicle-mediated transport", 0.019, 5.531, 3.736, 3.984,273.0000,0.895,0.179),
c("GO:0044237","cellular metabolic process",53.874,-4.894, 3.969, 7.428,262.0000,0.944,0.190),
c("GO:0000184","nuclear-transcribed mRNA catabolic process, nonsense-mediated decay", 0.004,-3.870,-5.934, 3.337,312.0000,0.901,0.196),
c("GO:0050821","protein stabilization", 0.020, 5.856,-5.345, 4.006,175.0000,0.847,0.203),
c("GO:0055114","oxidation-reduction process",15.044, 0.204, 6.343, 6.874,631.0000,0.919,0.210),
c("GO:0090503","RNA phosphodiester bond hydrolysis, exonucleolytic", 0.126,-4.789,-6.543, 4.796,120.0000,0.901,0.243),
c("GO:0015031","protein transport", 1.595, 6.147, 3.112, 5.900,259.0000,0.926,0.248),
c("GO:0048011","neurotrophin TRK receptor signaling pathway", 0.002, 3.067,-7.212, 2.916,589.0000,0.694,0.252),
c("GO:0006260","DNA replication", 1.998,-5.427,-5.260, 5.997,227.0000,0.864,0.257),
c("GO:0015991","ATP hydrolysis coupled proton transport", 0.196, 6.394, 2.621, 4.989,215.0000,0.876,0.279),
c("GO:0044711","single-organism biosynthetic process",12.458,-4.260, 4.783, 6.792,119.0000,0.890,0.283),
c("GO:0048523","negative regulation of cellular process", 0.942, 4.942,-6.684, 5.671,501.0000,0.757,0.284),
c("GO:0000460","maturation of 5.8S rRNA", 0.004,-3.542,-4.528, 3.316,118.0000,0.855,0.292),
c("GO:0016192","vesicle-mediated transport", 0.381, 5.700, 3.204, 5.277,188.0000,0.950,0.298),
c("GO:0090304","nucleic acid metabolic process",20.158,-5.756,-3.788, 7.001,822.0000,0.868,0.307),
c("GO:0006921","cellular component disassembly involved in execution phase of apoptosis", 0.002,-2.652, 4.438, 3.031,107.0000,0.856,0.309),
c("GO:0032879","regulation of localization", 0.242, 6.299,-2.993, 5.081,106.0000,0.798,0.309),
c("GO:0044710","single-organism metabolic process",39.463, 2.178, 6.042, 7.293,532.0000,0.919,0.316),
c("GO:0006508","proteolysis", 3.705,-6.972,-3.313, 6.266,357.0000,0.891,0.319),
c("GO:0044281","small molecule metabolic process",21.500, 0.573, 5.802, 7.029,622.0000,0.916,0.328),
c("GO:0009719","response to endogenous stimulus", 0.113, 2.775,-5.756, 4.750,118.0000,0.841,0.331),
c("GO:0090305","nucleic acid phosphodiester bond hydrolysis", 2.508,-5.199,-5.931, 6.096,185.0000,0.885,0.337),
c("GO:0050790","regulation of catalytic activity", 0.651, 5.287,-6.112, 5.510,125.0000,0.784,0.341),
c("GO:0048518","positive regulation of biological process", 0.684, 5.334,-6.487, 5.532,163.0000,0.817,0.343),
c("GO:1901564","organonitrogen compound metabolic process",19.565,-5.087,-3.147, 6.988,128.0000,0.942,0.361),
c("GO:0018279","protein N-linked glycosylation via asparagine", 0.002,-7.626,-1.205, 3.060,353.0000,0.854,0.364),
c("GO:0048519","negative regulation of biological process", 1.243, 5.182,-6.507, 5.791,107.0000,0.808,0.365),
c("GO:0043488","regulation of mRNA stability", 0.003, 2.073,-8.174, 3.214,123.0000,0.821,0.373),
c("GO:0042632","cholesterol homeostasis", 0.004, 5.904,-5.010, 3.342,114.0000,0.860,0.379),
c("GO:0036159","inner dynein arm assembly", 0.000,-2.094, 4.764, 2.228,113.0000,0.758,0.392),
c("GO:0006259","DNA metabolic process", 6.339,-5.376,-5.101, 6.499,424.0000,0.868,0.397),
c("GO:0006273","lagging strand elongation", 0.011,-4.439,-7.043, 3.747,154.0000,0.905,0.397),
c("GO:0006413","translational initiation", 0.267,-6.566,-3.778, 5.123,240.0000,0.866,0.398),
c("GO:0051103","DNA ligation involved in DNA repair", 0.013,-1.777,-7.362, 3.818,142.0000,0.750,0.402),
c("GO:0019538","protein metabolic process",12.328,-6.282,-4.681, 6.788,156.0000,0.912,0.406),
c("GO:0046777","protein autophosphorylation", 0.022,-7.286,-1.144, 4.038,270.0000,0.878,0.414),
c("GO:0034605","cellular response to heat", 0.016, 1.954,-6.567, 3.909,142.0000,0.814,0.416),
c("GO:0034641","cellular nitrogen compound metabolic process",33.428,-4.562,-2.532, 7.221,234.0000,0.912,0.432),
c("GO:0010467","gene expression",16.702,-6.153,-5.006, 6.920,262.0000,0.910,0.442),
c("GO:0007165","signal transduction", 3.804, 4.020,-5.499, 6.277,834.0000,0.586,0.449),
c("GO:0016043","cellular component organization", 4.287,-3.133, 5.614, 6.329,452.0000,0.864,0.462),
c("GO:0030574","collagen catabolic process", 0.001,-5.220, 1.949, 2.848,109.0000,0.790,0.468),
c("GO:0065008","regulation of biological quality", 2.709, 5.252,-6.040, 6.130,510.0000,0.799,0.471),
c("GO:0042493","response to drug", 0.207, 2.532,-6.588, 5.013,306.0000,0.803,0.473),
c("GO:0043161","proteasome-mediated ubiquitin-dependent protein catabolic process", 0.021,-7.359,-1.820, 4.026,118.0000,0.885,0.481),
c("GO:0006302","double-strand break repair", 0.063,-2.240,-6.988, 4.495,384.0000,0.725,0.488),
c("GO:0006810","transport",17.382, 6.050, 3.084, 6.937,512.0000,0.931,0.489),
c("GO:0009628","response to abiotic stimulus", 0.312, 2.898,-5.846, 5.190,169.0000,0.829,0.490),
c("GO:0018105","peptidyl-serine phosphorylation", 0.011,-7.493,-0.824, 3.736,199.0000,0.881,0.498));
one.data <- data.frame(revigo.data);
names(one.data) <- revigo.names;
one.data <- one.data [(one.data$plot_X != "null" & one.data$plot_Y != "null"), ];
one.data$plot_X <- as.numeric( as.character(one.data$plot_X) );
one.data$plot_Y <- as.numeric( as.character(one.data$plot_Y) );
one.data$plot_size <- as.numeric( as.character(one.data$plot_size) );
one.data$frequency <- as.numeric( as.character(one.data$frequency) );
one.data$uniqueness <- as.numeric( as.character(one.data$uniqueness) );
one.data$dispensability <- as.numeric( as.character(one.data$dispensability) );
p1 <- ggplot( data = one.data );
p1 <- p1 + geom_point( aes( plot_X, plot_Y, colour = uniqueness, size = plot_size), alpha = I(0.6) ) + scale_size_area();
p1 <- p1 + scale_colour_gradientn( colours = c("blue", "green", "yellow", "red"), limits = c( min(one.data$uniqueness), 0) );
p1 <- p1 + geom_point( aes(plot_X, plot_Y, size = plot_size), shape = 21, fill = "transparent", colour = I (alpha ("black", 0.6) )) + scale_size_area();
p1 <- p1 + scale_size( range=c(5, 30)) + theme_bw(); # + scale_fill_gradientn(colours = heat_hcl(7), limits = c(-300, 0) );
ex <- one.data [ one.data$dispensability < 0.15, ];
p1 <- p1 + geom_text( data = ex, aes(plot_X, plot_Y, label = description), colour = I(alpha("black", 0.85)), size = 3 );
p1 <- p1 + labs (y = "semantic space x", x = "semantic space y");
p1 <- p1 + theme(legend.key = element_blank()) ;
one.x_range = max(one.data$plot_X) - min(one.data$plot_X);
one.y_range = max(one.data$plot_Y) - min(one.data$plot_Y);
p1 <- p1 + xlim(min(one.data$plot_X)-one.x_range/10,max(one.data$plot_X)+one.x_range/10);
p1 <- p1 + ylim(min(one.data$plot_Y)-one.y_range/10,max(one.data$plot_Y)+one.y_range/10);
p1;
p1;
readmanga_stats <- read.delim("D:/Manga_DRM/MangaFox-Download-Script-master/MangaFox-Download-Script-master/readmanga_stats.tab", header=FALSE)
View(readmanga_stats)
readmanga_stats <- read.delim("D:/Manga_DRM/MangaFox-Download-Script-master/MangaFox-Download-Script-master/readmanga_stats.tab", header=FALSE, quote="")
View(readmanga_stats)
table(readmanga_stats$V8)
readmanga_stats[readmanga_stats$V8=="-",]
boxplot(readmanga_stats$V1[readmanga_stats$B8=='Japanese'],readmanga_stats$V1[readmanga_stats$B8=='Korean'],readmanga_stats$V1[readmanga_stats$B8=='Chinese'])
boxplot(readmanga_stats$V1[readmanga_stats$V8=='Japanese'],readmanga_stats$V1[readmanga_stats$V8=='Korean'],readmanga_stats$V1[readmanga_stats$V8=='Chinese'])
table(readmanga_stats$V8)
readmanga_stats.tab.processed <- read.delim("D:/Manga_DRM/MangaFox-Download-Script-master/MangaFox-Download-Script-master/readmanga_stats.tab.processed.txt", header=FALSE)
View(readmanga_stats.tab.processed)
boxplot(V2 ~ V1,data=readmanga_stats.tab.processed)
boxplot(V2 ~ V1,data=readmanga_stats.tab.processed,las=2)
table(readmanga_stats.tab.processed$V1)
table(readmanga_stats.tab.processed$V1[readmanga_stats.tab.processed$v3=="Korean"])
readmanga_stats.tab.processed$V1[readmanga_stats.tab.processed$v3=="Korean",]
readmanga_stats.tab.processed$V1[readmanga_stats.tab.processed$v3=="Korean"]
readmanga_stats.tab.processed$V1[readmanga_stats.tab.processed$V3=="Korean"]
table(readmanga_stats.tab.processed$V1[readmanga_stats.tab.processed$V3=="Korean"])
table(readmanga_stats.tab.processed$V1[readmanga_stats.tab.processed$V3=="Chinese"])
table(readmanga_stats.tab.processed$V1[readmanga_stats.tab.processed$V3=="Chinese"],readmanga_stats.tab.processed$V1[readmanga_stats.tab.processed$V3=="Korean"])
chinacounts <- table(readmanga_stats.tab.processed$V1[readmanga_stats.tab.processed$V3=="Chinese"])
koreacounts <- table(readmanga_stats.tab.processed$V1[readmanga_stats.tab.processed$V3=="Korean"])
japacounts <- table(readmanga_stats.tab.processed$V1[readmanga_stats.tab.processed$V3=="Japanese"])
total<-cbind(chinacounts,koreacounts,japacounts)
View(total)
chinacounts <- ftable(readmanga_stats.tab.processed$V1[readmanga_stats.tab.processed$V3=="Chinese"])
?ftable
?table
write.table(total,"readmanga_stats.table.txt")
cwd()
pwd()
ls()
dir()
write.table(total,"readmanga_stats.table.txt",sep="\t",quote=NULL)
write.table(total,"readmanga_stats.table.txt",sep="\t",quote='')
write.table(total,"readmanga_stats.table.txt",sep="\t",quote=FALSE)
source("http://bioconductor.org/biocLite.R")
biocLite("pathview")
data(gse16873.d)
library("pathview")
biocLite("pathview")
biocLite("org.Hs.eg.db")
data(gse16873.d)
library("org.Hs.eg.db")
data(gse16873.d)
Iris <- data.frame(rbind(iris3[,,1], iris3[,,2], iris3[,,3]),
Sp = rep(c("s","c","v"), rep(50,3)))
train <- sample(1:150, 75)
table(Iris$Sp[train])
z <- lda(Sp ~ ., Iris, prior = c(1,1,1)/3, subset = train)
library(MASS)
z <- lda(Sp ~ ., Iris, prior = c(1,1,1)/3, subset = train)
z
install.packages("deSolve")
drift<-function(time, state, parms){
S <- state[1:N]
M<-state[(N+1):(2*N)]
dM<- -v * diff(c(0,M))/dx - down*M + up*S
dS<- -v * diff(c(0,M))/dx + down*M - up*S - mort*S
list(c(dS,dM))
}
dx<-1
v<-10000
x<-seq(dx/2,650,by=dx)
N<-length(x)
up<-c(rep(6.1,200),rep(1.4,N-200))
down<-8000
mort<-1e-2
state<-c(S=rep(500,N),M=rep(0,N))
times<-seq(0,60,length=101)
library(odeSolver)
library("deSolve")
out<-ode.1D(y=state,times, drif, params=NULL, nspec=2 )
out<-ode.1D(y=state,times, drift, params=NULL, nspec=2 )
out<-ode.1D(y=state,times, drift, parms=NULL, nspec=2 )
out
print(out)
lvmodel<-function(t,x,parms,input) {
with(as.list(c(parms,x)){
import<-input(t)
dS <- import - b*S*P
dP <- c*S*P - d*K*P
dK <- e*P*K - f*K
list(c(dS, dP, dK))
})
}
sigimp<-approxfun(signal$times, signal$import)
out<-lsoda(init,time,lvmodel,parms,input=sigimp)
lvmodel<-function(t,x,parms,input) {
with(as.list(c(parms,x)){
import<-input(t)
dS <- import - b*S*P
dP <- c*S*P - d*K*P
dK <- e*P*K - f*K
list(c(dS, dP, dK))
})
}
lvmodel<-function(t,x,parms,input) {
with(as.list(c(parms,x)), {
import <- input(t)
dS <- import - b*S*P
dP <- c*S*P - d*K*P
dK <- e*P*K - f*K
list(c(dS, dP, dK))
})
}
sigimp<-approxfun(signal$times, signal$import)
library(deSolve)
parameters <- c(a = -8/3, b = -10, c =  28)
state <- c(X = 1, Y = 1, Z = 1)
Lorenz<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
# rate of change
dX <- a*X + Y*Z
dY <- b * (Y-Z)
dZ <- -X*Y + c*Y - Z
# return the rate of change
list(c(dX, dY, dZ))
})   # end with(as.list ...
}
times <- seq(0, 100, by = 0.01)
out <- ode(y = state, times = times, func = Lorenz, parms = parameters)
par(oma = c(0, 0, 3, 0))
plot(out, xlab = "time", ylab = "-")
plot(out[, "X"], out[, "Z"], pch = ".")
mtext(outer = TRUE, side = 3, "Lorenz model", cex = 1.5)
par(oma = c(0, 0, 3, 0))
plot(out, xlab = "time", ylab = "-")
plot(out[, "X"], out[, "Z"], pch = ".")
mtext(outer = TRUE, side = 3, "Lorenz model", cex = 1.5)
par(oma = c(0, 0, 3, 0))
plot(out, xlab = "time", ylab = "-")
plot(out[, "X"], out[, "Z"], pch = ".")
mtext(outer = TRUE, side = 3, "Lorenz model", cex = 1.5)
library(edgeR)
calcNormFactors()
calcNormFactors
print(calcNormFactors())
print(calcNormFactors
)
?calcNormFactors
edgeR::calcNormFactors()
edgeR::calcNormFactors
getMethod(calcNormFactors)
getMethod("calcNormFactors")
edgeR::::calcNormFactors
edgeR:::calcNormFactors
edgeR::calcNormFactors
edgeR:calcNormFactors
calcNormFactors
data<-calcNormFactors
View(data)
getMethod("edgeR",calcNormFactors)
getMethod(edgeR,calcNormFactors)
getAnywhere(calcNormFactors())
debug(calcNormFactors
)
rm(data)
library(tximport)
library(readr)
?tximport
setwd("C:/Users/dsobral/Desktop/ADER17S/material/difftests")
sampleFiles <- grep("trapnell_counts_",list.files(directory),value=TRUE)
directory <- "."
sampleFiles <- grep("trapnell_counts_",list.files(directory),value=TRUE)
sampleCondition <- sub("trapnell_counts_(C.*)_R.*","\\1",sampleFiles)
sampleTable <- data.frame(sampleName = sampleFiles,
fileName = sampleFiles,
condition = sampleCondition)
library("DESeq2")
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = directory,
design= ~ condition)
ddsHTSeq@design
ddsHTSeq <- DESeq(ddsHTSeq)
resHTSeq <- results(ddsHTSeq)
plotMA(resHTSeq, ylim=c(-2,2))
plotMA(resHTSeq)
resLFC <- lfcShrink(ddsHTSeq, coef=2)
write.csv(as.data.frame(resHTSeq[order(resHTSeq$padj),]), file="trapnell_counts_C1_VS_C2.DESeq2.txt")
plotPCA(ddsHTSeq, intgroup=c("condition"))
plotPCA(resHTSeq, intgroup=c("condition"))
vsd <- vst(ddsHTSeq, blind=FALSE)
plotPCA(vsd, intgroup=c("condition"))
vsd <- vst(ddsHTSeq, blind=FALSE)
plotMDS(vsd, intgroup=c("condition"))
?plotPCA
getMethod("plotPCA","DESeqTransform")
plotMDS(resHTSeq)
plotMDS(ddsHTSeq)
sampleDists <- dist(t(assay(vsd)))
library("RColorBrewer")
library("pheatmap")
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- vsd$condition
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
sampleDists <- dist(t(assay(vsd)))
library("RColorBrewer")
library("pheatmap")
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- vsd$condition
colnames(sampleDistMatrix) <- sampleTable$sampleName
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
plotPCA(vsd, intgroup=c("condition"))
#Plots the dispersion re-estimation procedure
plotDispEsts(ddsHTSeq)
hist(resHTSeq$padj, breaks=0:50/50, plot=FALSE)
hist(resHTSeq$padj, breaks=0:50/50)
hist(resHTSeq$pvalue, breaks=0:50/50)
hist(resHTSeq$pvalue, breaks=0:50/50, xlab="P value")
hist(resHTSeq$pvalue, breaks=0:50/50, xlab="P value", main="Histogram of P values")
#Plot Histogram of p-values
hist(resHTSeq$pvalue, breaks=0:50/50, xlab="p value", main="Histogram of uncorrected p values")
hist(resHTSeq$pvalue, xlab="p value", main="Histogram of uncorrected p values")
hist(resHTSeq$pvalue, breaks=0:100/100, xlab="p value", main="Histogram of uncorrected p values")
plot(resHTSeq$log2FoldChange,resHTSeq$pvalue)
points(resHTSeq$log2FoldChange[resHTSeq$padj<0.05],resHTSeq$pvalue[resHTSeq$padj<0.05],col="red")
plot(resHTSeq$log2FoldChange,-log2(resHTSeq$pvalue))
points(resHTSeq$log2FoldChange[resHTSeq$padj<0.05],-log2(resHTSeq$pvalue[resHTSeq$padj<0.05]),col="red")
#Plot a few selected genes...
select <- order(rowMeans(counts(ddsHTSeq,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(ddsHTSeq)[,c("condition")])
pheatmap(assay(vsd)[select,], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
select
df <- as.data.frame(colData(ddsHTSeq)[,c("condition")])
df
assay(vsd)[select,]
pheatmap(assay(vsd)[select,], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
head(counts(ddsHTSeq,normalized=TRUE))
head(counts(ddsHTSeq,normalized=FALSE))
head(cpm(ddsHTSeq))
normalized_counts<-counts(ddsHTSeq,normalized=TRUE)
log2_norm_counts<-log2(counts(ddsHTSeq,normalized=TRUE)+1)
View(log2_norm_counts)
select<-rownames(resHTSeq[resHTSeq$padj<0.05])
select<-rownames(resHTSeq[resHTSeq$padj<0.05,])
select<-row.names(resHTSeq[resHTSeq$padj<0.05,])
resHTSeq$padj<0.05
orderedRes<-resHTSeq[order(resHTSeq$padj),]
write.csv(as.data.frame(orderedRes), file="trapnell_counts_C1_VS_C2.DESeq2.csv")
log2_norm_counts<-log2(counts(ddsHTSeq,normalized=TRUE)+1)
select<-row.names(orderedRes[1:20,])
select
values=log2_norm_counts[select,]
values
pheatmap(values,
scale = "none",
cluster_rows = FALSE,
cluster_cols = FALSE,
fontsize_row = 8, #by default is 10
annotation_names_col = FALSE,
gaps_col = c(3,6),
display_numbers = TRUE,
number_format = "%.2f",
#filename = "trapnell_counts_C1_VS_C2.topdiff.png",
height=12,
width=6
)
pheatmap(values,
scale = "row",
cluster_rows = FALSE,
cluster_cols = FALSE,
fontsize_row = 8, #by default is 10
annotation_names_col = FALSE,
gaps_col = c(3,6),
display_numbers = TRUE,
number_format = "%.2f",
#filename = "trapnell_counts_C1_VS_C2.topdiff.png",
height=12,
width=6
)
#Need to set Session>Set Working Directory>To Source File Location
directory <- "."
#Get all the trapnell count files
sampleFiles <- grep("trapnell_counts_",list.files(directory),value=TRUE)
#Extract the condition from the file names
sampleCondition <- sub("trapnell_counts_(C.*)_R.*","\\1",sampleFiles)
#Put all the information in a table
sampleTable <- data.frame(sampleName = sampleFiles,
fileName = sampleFiles,
condition = sampleCondition)
library("DESeq2")
#Load all the data
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = directory,
design= ~ condition)
#This runs the whole pipeline: normalization, variance estimation, and testing
ddsHTSeq <- DESeq(ddsHTSeq)
#Plots the dispersion re-estimation procedure
plotDispEsts(ddsHTSeq)
#Produces the results into tables to be saved and to make plots
resHTSeq <- results(ddsHTSeq)
#Save result as csv file, sorted by adjusted pvalue
orderedRes<-resHTSeq[order(resHTSeq$padj),]
write.csv(as.data.frame(orderedRes), file="trapnell_counts_C1_VS_C2.DESeq2.csv")
#MA Plot
plotMA(resHTSeq)
#Vulcano Plot. In red, genes with adjusted pvalue of 0.05
plot(resHTSeq$log2FoldChange,-log2(resHTSeq$pvalue))
points(resHTSeq$log2FoldChange[resHTSeq$padj<0.05],-log2(resHTSeq$pvalue[resHTSeq$padj<0.05]),col="red")
#Plot Histogram of p-values
hist(resHTSeq$pvalue, breaks=0:50/50, xlab="p value", main="Histogram of uncorrected p values")
#Does a variant stabilization procedure useful for some plotting and clustering
#NOT to be used for differential analysis
vsd <- vst(ddsHTSeq, blind=FALSE)
#Plot PCA
plotPCA(vsd, intgroup=c("condition"))
#Plot Heatmap
sampleDists <- dist(t(assay(vsd)))
library("RColorBrewer")
library("pheatmap")
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- vsd$condition
colnames(sampleDistMatrix) <- sampleTable$sampleName
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
#Plot normalized values of top 20 differentaially expressed genes...
log2_norm_counts<-log2(counts(ddsHTSeq,normalized=TRUE)+1)
select<-row.names(orderedRes[1:20,])
values=log2_norm_counts[select,]
pheatmap(values,
scale = "none",
cluster_rows = FALSE,
cluster_cols = FALSE,
fontsize_row = 8, #by default is 10
annotation_names_col = FALSE,
gaps_col = c(3,6),
display_numbers = TRUE,
number_format = "%.2f",
#filename = "trapnell_counts_C1_VS_C2.topdiff.png",
height=12,
width=6
)
#Need to set Session>Set Working Directory>To Source File Location
directory <- "."
#Get all the trapnell count files
sampleFiles <- grep("trapnell_counts_",list.files(directory),value=TRUE)
#Extract the condition from the file names
sampleCondition <- sub("trapnell_counts_(C.*)_R.*","\\1",sampleFiles)
#Put all the information in a table
sampleTable <- data.frame(sampleName = sampleFiles,
fileName = sampleFiles,
condition = sampleCondition)
library("DESeq2")
#Load all the data
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = directory,
design= ~ condition)
#Need to set Session>Set Working Directory>To Source File Location
directory <- "."
#Get all the trapnell count files
sampleFiles <- grep("trapnell_counts_",list.files(directory),value=TRUE)
#Extract the condition from the file names
sampleCondition <- sub("trapnell_counts_(C.*)_R.*","\\1",sampleFiles)
#Put all the information in a table
sampleTable <- data.frame(sampleName = sampleFiles,
fileName = sampleFiles,
condition = sampleCondition)
library("DESeq2")
#Load all the data
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = directory,
design= ~ condition)
#This runs the whole pipeline: normalization, variance estimation, and testing
ddsHTSeq <- DESeq(ddsHTSeq)
#Plots the dispersion re-estimation procedure
plotDispEsts(ddsHTSeq)
#Produces the results into tables to be saved and to make plots
resHTSeq <- results(ddsHTSeq)
#Save result as csv file, sorted by adjusted pvalue
orderedRes<-resHTSeq[order(resHTSeq$padj),]
write.csv(as.data.frame(orderedRes), file="trapnell_C1_VS_C2.DESeq2.csv")
#MA Plot
plotMA(resHTSeq)
#Vulcano Plot. In red, genes with adjusted pvalue of 0.05
plot(resHTSeq$log2FoldChange,-log2(resHTSeq$pvalue))
points(resHTSeq$log2FoldChange[resHTSeq$padj<0.05],-log2(resHTSeq$pvalue[resHTSeq$padj<0.05]),col="red")
#Plot Histogram of p-values
hist(resHTSeq$pvalue, breaks=0:50/50, xlab="p value", main="Histogram of uncorrected p values")
#Does a variant stabilization procedure useful for some plotting and clustering
#NOT to be used for differential analysis
vsd <- vst(ddsHTSeq, blind=FALSE)
#Plot PCA
plotPCA(vsd, intgroup=c("condition"))
#Plot Heatmap
sampleDists <- dist(t(assay(vsd)))
library("RColorBrewer")
library("pheatmap")
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- vsd$condition
colnames(sampleDistMatrix) <- sampleTable$sampleName
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
#Plot normalized values of top 20 differentaially expressed genes...
log2_norm_counts<-log2(counts(ddsHTSeq,normalized=TRUE)+1)
select<-row.names(orderedRes[1:20,])
values=log2_norm_counts[select,]
pheatmap(values,
scale = "none",
cluster_rows = FALSE,
cluster_cols = FALSE,
fontsize_row = 8, #by default is 10
annotation_names_col = FALSE,
gaps_col = c(3,6),
display_numbers = TRUE,
number_format = "%.2f",
#filename = "trapnell_C1_VS_C2.topdiff.png",
height=12,
width=6
)
